#!/bin/bash
#
# Copyright 2016 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

if [ "$1" != "create" -a "$1" != "destroy" ]; then
    echo "usage: $0 create|destroy controlplane|bookinfo"
    exit 1
fi

if [ "$2" != "controlplane" -a "$2" != "bookinfo" ]; then
    echo "usage: $0 create|destroy controlplane|bookinfo"
    exit 1
fi

ACTION=$1
COMPONENT=$2

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $SCRIPTDIR/.bluemixrc

CONTROLPLANE_IMAGES=(
    ${CONTROLLER_IMAGE}
    ${REGISTRY_IMAGE}
)

CONTROLPLANE_GROUPS=(
    amalgam8_controller
    amalgam8_registry
)

BOOKINFO_GROUPS=(
    bookinfo_productpage
    bookinfo_details
    bookinfo_ratings
    bookinfo_reviews1
    bookinfo_reviews2
    bookinfo_reviews3
    bookinfo_gateway
)

BOOKINFO_IMAGES=(
    ${PRODUCTPAGE_IMAGE}
    ${DETAILS_IMAGE}
    ${RATINGS_IMAGE}
    ${REVIEWS_V1_IMAGE}
    ${REVIEWS_V2_IMAGE}
    ${REVIEWS_V3_IMAGE}
    ${GATEWAY_IMAGE}
)


if [ "$ACTION" == "create" ]; then

    BLUEMIX_IMAGES=$(bluemix ic images --format "{{.Repository}}:{{.Tag}}")

    if [ "$COMPONENT" == "controlplane" ]; then
        #################################################################################
        # Copy Dockerhub images
        #################################################################################


        for image in ${CONTROLPLANE_IMAGES[@]}; do
            echo "$BLUEMIX_IMAGES" | grep "$image" > /dev/null
            if [ $? -ne 0 ]; then
                echo "Copying ${DOCKERHUB_NAMESPACE}/$image from Dockerhub into ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/$image"
                bluemix ic cpi ${DOCKERHUB_NAMESPACE}/$image ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/$image
            fi
        done

        #################################################################################
        # Start controller and registry
        #################################################################################

        echo "Starting controller"
        bluemix ic group-create --name amalgam8_controller \
                --publish 8080 --memory 128 --auto \
                --min 1 --max 2 --desired 1 \
                --hostname $CONTROLLER_HOSTNAME \
                --domain $ROUTES_DOMAIN \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${CONTROLLER_IMAGE}

        echo "Starting registry"
        bluemix ic group-create --name amalgam8_registry \
                --publish 8080 --memory 128 --auto \
                --min 1 --max 2 --desired 1 \
                --hostname $REGISTRY_HOSTNAME \
                --domain $ROUTES_DOMAIN \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${REGISTRY_IMAGE}

        # Wait for controller route to set up
        echo "Waiting for controller route to set up"
        attempt=0
        while true; do
            code=$(curl -w "%{http_code}" --max-time 10 "${CONTROLLER_URL}/health" -o /dev/null)
            if [ "$code" = "200" ]; then
                echo "Controller route is set to '$CONTROLLER_URL'"
                break
            fi

            attempt=$((attempt + 1))
            if [ "$attempt" -gt 10 ]; then
                echo "Timeout waiting for controller route: /health returned HTTP ${code}"
                echo "Deploying the controlplane has failed"
                exit 1
            fi
            sleep 10s
        done

        # Wait for registry route to set up
        echo "Waiting for registry route to set up"
        attempt=0
        while true; do
            code=$(curl -w "%{http_code}" --max-time 10 "${REGISTRY_URL}/uptime" -o /dev/null)
            if [ "$code" = "200" ]; then
                echo "Registry route is set to '$REGISTRY_URL'"
                break
            fi

            attempt=$((attempt + 1))
            if [ "$attempt" -gt 10 ]; then
                echo "Timeout waiting for registry route: /uptime returned HTTP ${code}"
                echo "Deploying the controlplane has failed"
                exit 1
            fi
            sleep 10s
        done

        echo "Controlplane has been deployed successfully"
    else


        for image in ${BOOKINFO_IMAGES[@]}; do
            echo "$BLUEMIX_IMAGES" | grep "$image" > /dev/null
            if [ $? -ne 0 ]; then
                echo "Copying ${DOCKERHUB_NAMESPACE}/$image from Dockerhub into ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/$image"
                bluemix ic cpi ${DOCKERHUB_NAMESPACE}/$image ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/$image
            fi
        done

        #################################################################################
        # start the productpage microservice instances
        #################################################################################

        echo "Starting bookinfo productpage microservice (v1)"

        bluemix ic group-create --name bookinfo_productpage \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_REGISTRY_POLL=5s \
                --env A8_CONTROLLER_URL=$CONTROLLER_URL \
                --env A8_CONTROLLER_POLL=5s \
                --env A8_SERVICE=productpage:v1 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                --env A8_PROXY=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${PRODUCTPAGE_IMAGE}

        #################################################################################
        # Start the details microservice instances
        #################################################################################

        echo "Starting bookinfo details microservice (v1)"
        
        bluemix ic group-create --name bookinfo_details \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_SERVICE=details:v1 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${DETAILS_IMAGE}

        #################################################################################
        # Start the ratings microservice instances
        #################################################################################

        echo "Starting bookinfo ratings microservice (v1)"

        bluemix ic group-create --name bookinfo_ratings \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_SERVICE=ratings:v1 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${RATINGS_IMAGE}

        #################################################################################
        # Start the reviews microservice instances
        #################################################################################

        echo "Starting bookinfo reviews microservice (v1)"

        bluemix ic group-create --name bookinfo_reviews1 \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_REGISTRY_POLL=5s \
                --env A8_CONTROLLER_URL=$CONTROLLER_URL \
                --env A8_CONTROLLER_POLL=5s \
                --env A8_SERVICE=reviews:v1 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                --env A8_PROXY=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${REVIEWS_V1_IMAGE}

        echo "Starting bookinfo reviews microservice (v2)"

        bluemix ic group-create --name bookinfo_reviews2 \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_REGISTRY_POLL=5s \
                --env A8_CONTROLLER_URL=$CONTROLLER_URL \
                --env A8_CONTROLLER_POLL=5s \
                --env A8_SERVICE=reviews:v2 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                --env A8_PROXY=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${REVIEWS_V2_IMAGE}

        echo "Starting bookinfo reviews microservice (v3)"

        bluemix ic group-create --name bookinfo_reviews3 \
                --publish 9080 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_REGISTRY_POLL=5s \
                --env A8_CONTROLLER_URL=$CONTROLLER_URL \
                --env A8_CONTROLLER_POLL=5s \
                --env A8_SERVICE=reviews:v3 \
                --env A8_ENDPOINT_PORT=9080 \
                --env A8_ENDPOINT_TYPE=http \
                --env A8_REGISTER=true \
                --env A8_PROXY=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/${REVIEWS_V3_IMAGE}

        #################################################################################
        # Start the gateway
        #################################################################################

        echo "Starting bookinfo gateway"

        bluemix ic group-create --name bookinfo_gateway \
                --publish 6379 --memory 128 --auto --anti \
                --min 1 --max 2 --desired 1 \
                --hostname $BOOKINFO_HOSTNAME \
                --domain $ROUTES_DOMAIN \
                --env A8_REGISTRY_URL=$REGISTRY_URL \
                --env A8_REGISTRY_POLL=5s \
                --env A8_CONTROLLER_URL=$CONTROLLER_URL \
                --env A8_CONTROLLER_POLL=5s \
                --env A8_SERVICE=gateway \
                --env A8_PROXY=true \
                ${BLUEMIX_REGISTRY_HOST}/${BLUEMIX_REGISTRY_NAMESPACE}/$GATEWAY_IMAGE

        echo "Bookinfo app has been deployed successfully"
    fi
else
    EXISTING_GROUPS=$(bluemix ic groups)
    if [ "$COMPONENT" == "controlplane" ]; then
        for group in ${CONTROLPLANE_GROUPS[@]}; do
            echo $EXISTING_GROUPS | grep $group > /dev/null
            if [ $? -eq 0 ]; then
                echo "Requesting removal of $group container group"
                bluemix ic group-remove $group
            fi
        done

    else
        for group in ${BOOKINFO_GROUPS[@]}; do
            echo $EXISTING_GROUPS | grep $group > /dev/null
            if [ $? -eq 0 ]; then
                echo "Requesting removal of $group container group"
                bluemix ic group-remove $group
            fi
        done
    fi
    echo "Waiting for $COMPONENT components to be removed"
    sleep 15
fi
